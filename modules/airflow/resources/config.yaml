###################################
# Airflow - Common Configs
###################################
airflow:
  ## the airflow executor type to use
  ##
  executor: KubernetesExecutor

  ## the fernet key used to encrypt the connections in the database
  ##
  fernetKey: "7T512UXSSmBOkpWimFHIVb8jK6lfmSAvx4mO6Arehnc="

  ## environment variables for the web/scheduler/worker Pods (for airflow configs)
  ##
  config:
    ## security
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "False"

    ## dags
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: "60"

  ## a list of initial users to create
  ##
  users:
    - username: admin
      password: admin
      role: Admin
      email: admin@example.com
      firstName: admin
      lastName: admin
    - username: user
      password: user
      role: User
      email: user@example.com
      firstName: user
      lastName: user

  ## if we update users or just create them the first time (lookup by `username`)
  ##
  usersUpdate: false

  ## a list of initial connections to create
  ##
  connections:
    ## see docs: https://airflow.apache.org/docs/apache-airflow-providers-google/stable/connections/gcp.html
    - id: my_gcp
      type: google_cloud_platform
      description: my GCP connection
      extra: |-
        { "extra__google_cloud_platform__num_retries": "5" }

  ## a list of initial variables to create
  ##
  variables:
    - key: "environment"
      value: "prod"

  ## a list of initial pools to create
  ##
  pools:
    - name: "pool_1"
      slots: 5
      description: "example pool with 3 slots"
    - name: "pool_2"
      slots: 10
      description: "example pool with 5 slots"

  extraPipPackages:
    - "airflow-exporter"

  kubernetesPodTemplate:
    ## extra pip packages to install in the Pod template
    ##
    ## EXAMPLE:
    ##   extraPipPackages:
    ##     - "SomeProject==1.0.0"
    ##
    extraPipPackages:
      - "airflow-exporter"

###################################
# Airflow - Scheduler Configs
###################################
scheduler:
  ## the number of scheduler Pods to run
  ##
  replicas: 1
  ## resource requests/limits for the scheduler Pod
  ##
  resources:
    requests:
      cpu: "1000m"
      memory: "512Mi"

###################################
# Airflow - WebUI Configs
###################################
web:
  ## configs to generate webserver_config.py
  ##
  webserverConfig:
    ## the full text value to mount as the webserver_config.py file
    ##
    stringOverride: |-
      from flask_appbuilder.security.manager import AUTH_DB
      # use embedded DB for auth
      AUTH_TYPE = AUTH_DB
  ## the number of web Pods to run
  ##
  replicas: 1

  ## resource requests/limits for the airflow web Pods
  ##
  resources:
    requests:
      cpu: "200m"
      memory: "900Mi"

  ## configs for the web Pods' liveness probe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6

###################################
# Airflow - Worker Configs
###################################
workers:
  ## if the airflow workers StatefulSet should be deployed
  ##
  enabled: false

###################################
# Airflow - Flower Configs
###################################
flower:
  ## if the Flower UI should be deployed
  ##
  enabled: false

###################################
# Airflow - Logs Configs
###################################
logs:
  ## configs for the logs PVC
  ##
  persistence:
    ## if a persistent volume is mounted at `logs.path`
    ##
    enabled: false

###################################
# Airflow - DAGs Configs
###################################
dags:
  ## the airflow dags folder
  ##
  path: /opt/airflow/dags

  gitSync:
    enabled: true
    repo: "<YOUR_GIT_REPO_SSH_URL>"
    branch: "main"
    revision: "HEAD"
    syncWait: 60
    sshSecret: "airflow-ssh-git-secret"
    sshSecretKey: "id_rsa"
    sshKnownHosts: ""

###################################
# Kubernetes - RBAC
###################################
rbac:
  ## if Kubernetes RBAC resources are created
  ##
  create: true

###################################
# Kubernetes - Service Account
###################################
serviceAccount:
  ## if a Kubernetes ServiceAccount is created
  ##
  create: true

  ## the name of the ServiceAccount
  ##
  name: "airflow"

  ## annotations for the ServiceAccount
  ##
  annotations:
    iam.gke.io/gcp-service-account: default@tbd-2021l-123.iam.gserviceaccount.com

###################################
# Database - PostgreSQL Chart
###################################
postgresql:
  enabled: false

externalDatabase:
  ## the type of external database: {mysql,postgres}
  ##
  type: postgres

  ## the host of the external database
  ##
  host: tbd-airflow-external-db

  ## the port of the external database
  ##
  port: 5432

  ## the database/scheme to use within the the external database
  ##
  database: airflow_db

  ## the user of the external database
  ##
  user: airflow_user

  ## the name of a pre-created secret containing the external database password
  ##
  passwordSecret: "airflow-user.tbd-airflow-external-db.credentials.postgresql.acid.zalan.do"

  ## the key within `externalDatabase.passwordSecret` containing the password string
  ##
  passwordSecretKey: "password"

  ## the connection properties for external database, e.g. "?sslmode=require"
  properties: "?sslmode=require"

###################################
# Database - Redis Chart
###################################
redis:
  enabled: false

######################################
# Prometheus Operator - ServiceMonitor
######################################
serviceMonitor:
  ## if ServiceMonitor resources should be deployed for airflow webserver
  ##
  ## WARNING:
  ## - you will need an exporter in your airflow docker container, for example:
  ##   https://github.com/epoch8/airflow-exporter
  ##
  ## NOTE:
  ## - you can install pip packages with `airflow.extraPipPackages`
  ## - ServiceMonitor is a resource from: https://github.com/prometheus-operator/prometheus-operator
  ##
  enabled: true

  ## labels for ServiceMonitor, so that Prometheus can select it
  ##
  selector:
    prometheus: airflow-web

  ## the ServiceMonitor web endpoint path
  ##
  path: /admin/metrics

  ## the ServiceMonitor web endpoint interval
  ##
  interval: "30s"